<?php
/**
 * Document class file
 *
 * See {@link AeDocument} class documentation.
 *
 * @author Anton Suprun <kpobococ@gmail.com>
 * @version 1.0
 * @package AnEngine
 * @todo add subpackage once custom documentor is done //Framework
 */

/**
 * Document class
 *
 * Document class is used to simplify document header generation, script and
 * stylesheet inclusion etc. Let's assume you want to generate a simple XHTML
 * page with title and a favicon:
 * <code> $document = AeDocument::getInstance('Simple page', array(
 *     'doctype' => AeDocument::TYPE_XHTML_10_STRICT,
 *     'icon'    => 'path/to/favicon.ico'
 * ));
 *
 * echo $document->getDocumentType() .
 * '&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 *     ' . $document->getHead(8);</code>
 *
 * The code above will result in the following html being generated:
 * <pre> &lt;?xml version="1.0" encoding="utf-8"?&gt;
 * &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 *                       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
 * &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"&gt;
 *     &lt;head&gt;
 *         &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
 *         &lt;title&gt;Simple page&lt;/title&gt;
 *         &lt;link rel="shortcut icon" href="path/to/favicon.ico" type="image/x-icon" /&gt;
 *     &lt;/head&gt;</pre>
 *
 * Note how the head block is indented. If you review the last line of the code,
 * you'll notice that a number 8 is passed to a call to {@link
 * AeDocument::getHead() getHead()}. This number specifies how much space should
 * be left before each tag inside the head tag. The head tag itself, although
 * being autogenerated, is moved 4 spaces ahead of it's contents. You can also
 * disable this functionality by passing 0 to the method. You can also disable
 * head tag auto-generating completely by passing false as the fourth method
 * argument. See {@link AeDocument::getHead() method documentation} for more
 * detailed description of the function's options.
 *
 * @author Anton Suprun <kpobococ@gmail.com>
 * @version 1.0
 * @package AnEngine
 * @todo add subpackage once custom documentor is done //Framework
 */
class AeDocument extends AeObject
{
    // *** Title modes
    const TITLE_REGULAR = 1;
    const TITLE_REVERSE = 2;

    /**
     * XHTML 1.1 doctype declaration
     */
    const TYPE_XHTML_11 = 1;

    /**
     * XHTML 1.0 Strict doctype declaration
     */
    const TYPE_XHTML_10_STRICT = 2;

    /**
     * XHTML 1.0 Transitional doctype declaration
     */
    const TYPE_XHTML_10_TRANSITIONAL = 3;

    /**
     * XHTML 1.0 Frameset doctype declaration
     */
    const TYPE_XHTML_10_FRAMESET = 4;

    /**
     * HTML 4.01 Strict doctype declaration
     */
    const TYPE_HTML_401_STRICT = 5;

    /**
     * HTML 4.01 Transitional doctype declaration
     */
    const TYPE_HTML_401_TRANSITIONAL = 6;

    /**
     * HTML 4.01 Frameset doctype declaration
     */
    const TYPE_HTML_401_FRAMESET = 7;

    /**
     * HTML 5
     */
    const TYPE_HTML_5 = 8;

    /**
     * Document title
     * @var array
     */
    protected $_title;

    /**
     * Document head tags
     * @var array
     */
    protected $_tags = array();

    /**
     * Document styles
     * @var array
     */
    protected $_styles = array();

    /**
     * Document scripts
     * @var array
     */
    protected $_scripts = array();

    /**
     * Document content type
     * @var string
     */
    protected $_contentType = 'text/html';

    /**
     * Document type
     * @var array
     */
    protected $_documentType = self::TYPE_XHTML_10_STRICT;

    /**
     * Constructor
     *
     * You can set base title using constructor. The <var>$title</var> parameter
     * accepts either a single title part as string or an array of title parts.
     * Title parts are concatenated using the separator provided via the
     * {@link AeDocument::getTitle() getTitle()} or {@link AeDocument::getHead()
     * getHead()} methods.
     *
     * You can also set several most commonly used options using class
     * constructor. The available options are:
     * - doctype:      document type. Default: XHTML 1.0 Strict
     * - content-type: document content type. Default: text/html
     * - icon:         document favicon path. Default: browser default
     *
     * @uses AeDocument::setDocumentType()
     * @uses AeDocument::setContentType()
     * @uses AeDocument::setIcon()
     *
     * @param string|array $title
     * @param array        $options
     */
    public function __construct($title = array(), $options = array())
    {
        if ($title instanceof AeType) {
            $title = $title->getValue();
        }

        if ($options instanceof AeArray) {
            $options = $options->getValue();
        }

        if (!empty($title)) {
            $this->addTitle($title);
        }

        if (is_array($options))
        {
            // *** Add document type
            if (isset($options['doctype'])) {
                $this->setDocumentType($options['doctype']);
            } else if (!is_array($this->_documentType)) {
                $this->setDocumentType($this->_documentType);
            }

            // *** Add content type
            if (isset($options['content-type'])) {
                $this->setContentType($options['content-type']);
            }

            // *** Add favicon
            if (isset($options['icon'])) {
                $this->setIcon($options['icon']);
            }
        }
    }

    /**
     * Add title
     *
     * Adds a part of the title to current title array. This array gets
     * concatenated when either {@link AeDocument::getHead()} or {@link
     * AeDocument::getTitle()} gets called, using the separator provided as
     * method parameter. See respective method documentation for more details.
     *
     * This method accepts an unlimited number of string arguments and treats
     * each string as a separate title part:
     * <code> $document->addTitle('My site');
     * $document->addTitle('Articles', 'My article');
     *
     * echo $document->getTitle(' - ', AeDocument::TITLE_REVERSE, false);
     * // prints "My article - Articles - My site"</code>
     *
     * It will also understand a single array of strings.
     *
     * @throws AeDocumentException #400 on invalid value
     *
     * @param string $title,...
     *
     * @return AeDocument self
     */
    public function addTitle($title)
    {
        $num = func_num_args();

        if ($num == 1)
        {
            $arg  = func_get_arg(0);
            $type = AeType::of($arg);

            if ($type == 'array') {
                $title = $arg;
            } else if ($type == 'string') {
                $title = array((string) $arg);
            } else {
                throw new AeDocumentException('Invalid value passed: expecting string or array, ' . $type . ' given', 400);
            }
        } else {
            $title = func_get_args();
        }

        if ($title instanceof AeType) {
            $title = $title->getValue();
        }

        foreach ($title as $bit)
        {
            if (AeType::of($bit) != 'string') {
                throw new AeDocumentException('Invalid value passed: expecting string, ' . AeType::of($bit) . ' given', 400);
            }

            $this->_title[] = (string) $bit;
        }

        return $this;
    }

    public function addTag($name, $value = null, $attrs = array(), $ie = null)
    {
        if ($value instanceof AeType) {
            $value = $value->getValue();
        }

        if ($ie instanceof AeScalar) {
            $ie = $ie->toInteger()->getValue();
        }

        $tag = array(
            'name'  => (string) $name,
            'value' => $value,
            'attrs' => $attrs
        );

        if ($ie !== null) {
            $tag['ie'] = $ie;
        }

        $this->_tags[] = $tag;

        return $this;
    }

    public function addMeta($name, $attrs = array())
    {
        if ($attrs instanceof AeArray) {
            $attrs = $attrs->getValue();
        }

        if ($name !== null) {
            $attrs['name'] = (string) $name;
        }

        return $this->addTag('meta', null, $attrs);
    }

    public function addLink($rel, $attrs = array())
    {
        if ($attrs instanceof AeArray) {
            $attrs = $attrs->getValue();
        }

        if ($rel !== null) {
            $attrs['rel'] = (string) $rel;
        }

        return $this->addTag('link', null, $attrs);
    }

    public function addStyle($content, $internal = false, $attrs = array(), $ie = null)
    {
        if ($content instanceof AeScalar) {
            $content = (string) $content;
        }

        if ($internal instanceof AeScalar) {
            $internal = $internal->toBoolean()->getValue();
        }

        if ($attrs instanceof AeArray) {
            $attrs = $attrs->getValue();
        }

        $attrs['type'] = 'text/css';

        if ($internal) {
            return $this->addTag('style', $content, $attrs, $ie);
        }

        if (in_array($content, $this->_styles)) {
            return $this;
        }

        $this->_styles[] = $content;
        $attrs['rel']  = 'stylesheet';
        $attrs['href'] = $content;

        return $this->addTag('link', null, $attrs, $ie);
    }

    public function addScript($content, $inline = false, $attrs = array(), $ie = null)
    {
        if ($inline instanceof AeScalar) {
            $inline = $inline->toBoolean()->getValue();
        }

        if ($attrs instanceof AeArray) {
            $attrs = $attrs->getValue();
        }

        $attrs['type'] = 'text/javascript';

        if (!$inline)
        {
            if (in_array((string) $content, $this->_scripts)) {
                return $this;
            }

            $this->_scripts[] = (string) $content;
            $attrs['src']     = (string) $content;
            $content          = '';
        }

        return $this->addTag('script', $content, $attrs, $ie);
    }

    public function setDocumentType($type = self::TYPE_XHTML_10_STRICT, $link = null, $xmlHead = null)
    {
        if (is_int($type))
        {
            // *** Pre-defined constants
            switch ($type)
            {
                case self::TYPE_XHTML_11: {
                    $dt = array(
                        '-//W3C//DTD XHTML 1.1//EN',
                        'http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd',
                        true
                    );
                } break;

                case self::TYPE_XHTML_10_TRANSITIONAL: {
                    $dt = array(
                        '-//W3C//DTD XHTML 1.0 Transitional//EN',
                        'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd',
                        true
                    );
                } break;

                case self::TYPE_XHTML_10_FRAMESET: {
                    $dt = array(
                        '-//W3C//DTD XHTML 1.0 Frameset//EN',
                        'http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd',
                        true
                    );
                } break;

                case self::TYPE_HTML_401_STRICT: {
                    $dt = array(
                        '-//W3C//DTD HTML 4.01//EN',
                        'http://www.w3.org/TR/html4/strict.dtd'
                    );
                } break;

                case self::TYPE_HTML_401_TRANSITIONAL: {
                    $dt = array(
                        '-//W3C//DTD HTML 4.01 Transitional//EN',
                        'http://www.w3.org/TR/html4/loose.dtd'
                    );
                } break;

                case self::TYPE_HTML_401_FRAMESET: {
                    $dt = array(
                        '-//W3C//DTD HTML 4.01 Frameset//EN',
                        'http://www.w3.org/TR/html4/frameset.dtd'
                    );
                } break;

                case self::TYPE_HTML_5: {
                    $dt = '';
                } break;

                case self::TYPE_XHTML_10_STRICT:
                default: {
                    $dt = array(
                        '-//W3C//DTD XHTML 1.0 Strict//EN',
                        'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd',
                        true
                    );
                } break;
            }
        } else {
            $dt = array();
        }

        if ($type instanceof AeScalar) {
            $type = (string) $type;
        }

        if ($type instanceof AeArray) {
            $type = $type->getValue();
        }

        if (empty($dt))
        {
            if (!is_string($type) && !is_array($type)) {
                throw new AeDocumentException('Invalid type passed: expecting constant, string or array, ' . AeType::of($type) . ' given', 400);
            } else if (is_string($type)) {
                $dt = array($type);
            } else {
                $dt = $type;
            }
        }

        if ($link !== null)
        {
            if ($link instanceof AeScalar) {
                $link = (string) $link;
            }

            $dt[1] = $link;
        }

        if ($xmlHead !== null)
        {
            if ($xmlHead instanceof AeScalar) {
                $xmlHead = $xmlHead->toBoolean()->getValue();
            }

            $dt[2] = $xmlHead;
        }

        $this->_documentType = $dt;

        return $this;
    }

    public function setContentType($type = 'text/html')
    {
        $this->_contentType = (string) $type;

        return $this;
    }

    public function setIcon($location, $type = 'image/x-icon')
    {
        $attrs = array(
            'rel'  => 'shortcut icon',
            'href' => (string) $location,
            'type' => (string) $type
        );

        return $this->addTag('link', null, $attrs);
    }

    public function getTags($indent = 4)
    {
        $pre    = str_repeat(' ', $indent);
        $return = '';

        foreach ($this->_tags as $tag)
        {
            if (isset($tag['ie'])) {
                $return .= $pre . '<!--[if IE ' . $tag['ie']  . ']>' . "\n";
            }

            $return .= $pre . '<' . $tag['name'];

            foreach ($tag['attrs'] as $key => $val) {
                $return .= ' ' . $key . '="' . $val . '"';
            }

            if ($tag['value'] !== null) {
                $return .= '>' . $tag['value'] . '</' . $tag['name'] . '>';
            } else {
                $return .= ' />';
            }

            $return .= "\n";

            if (isset($tag['ie'])) {
                $return .= $pre . '<![endif]-->' . "\n";
            }
        }

        return ltrim($return);
    }

    public function getTitle($separator = ' &ndash; ', $type = self::TITLE_REGULAR, $wrap = true)
    {
        $title = $this->_title;

        if (!empty($title))
        {
            if ($type instanceof AeScalar) {
                $type = $type->toInteger()->getValue();
            }

            if ($type == self::TITLE_REVERSE) {
                $title = array_reverse($title);
            }

            $title = implode((string) $separator, $title);
        }

        if ($wrap instanceof AeScalar) {
            $wrap = $wrap->toBoolean()->getValue();
        }

        if ($wrap) {
            $title = '<title>' . $title . '</title>' . "\n";
        }

        return $title;
    }

    public function getContentType()
    {
        $ct = $this->_contentType;

        return '<meta http-equiv="Content-Type" content="' . $ct . '; charset=utf-8" />' . "\n";
    }

    public function getDocumentType()
    {
        if (!is_array($this->_documentType)) {
            return '';
        }

        $dt     = $this->_documentType;
        $return = '';

        if (is_array($dt) && (bool) $dt[2] === true) {
            $return = '<' . '?xml version="1.0" encoding="utf-8"?' . '>' . "\n";
        }

        $return .= '<!DOCTYPE html';

        if (!empty($dt[0]))
        {
            $return .= ' PUBLIC "' . $dt[0] . '"';

            if (is_string($dt[1])) {
                // *** Spacing to indent double quotes
                $return .= "\n" . '                      "' . $dt[1] . '"';
            }
        }

        $return .= '>' . "\n";

        return $return;
    }

    public function getHead($indent = 4, $titleSeparator = ' &ndash; ', $titleType = self::TITLE_REGULAR, $wrap = true)
    {
        if ($indent instanceof AeScalar) {
            $indent = $indent->toInteger()->getValue();
        }

        $pre    = $indent > 0 ? str_repeat(' ', $indent) : '';
        $return = '';

        $return .= $this->getContentType();
        $return .= $pre . $this->getTitle($titleSeparator, $titleType);
        $return .= $pre . $this->getTags($indent);

        if ($wrap instanceof AeScalar) {
            $wrap = $wrap->toBoolean()->getValue();
        }

        $return = rtrim($return) . "\n";

        if ($wrap) {
            $hpre   = $indent - 4 > 0 ? str_repeat(' ', $indent - 4) : '';
            $return = '<head>' . "\n" . $pre . $return . $hpre . '</head>' . "\n";
        }

        return $return;
    }

    /**
     *
     * @return AeDocument
     */
    public static function getInstance()
    {
        $args = func_get_args();
        return AeInstance::get('AeDocument', $args, true, false);
    }
}

/**
 * Document exception class
 *
 * Document-specific exception class
 *
 * @author Anton Suprun <kpobococ@gmail.com>
 * @version 1.0
 * @package AnEngine
 * @todo add subpackage once custom documentor is done //Exception
 */
class AeDocumentException extends AeException
{
    /**
     * @param string $message
     * @param int    $code
     */
    public function __construct($message, $code = 500)
    {
        $this->_appendPrefix('Document');
        parent::__construct($message, $code);
    }
}

?>